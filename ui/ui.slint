import { SpinBox, Button, CheckBox, Slider, LineEdit, ListView,
    HorizontalBox, VerticalBox, GridBox, StandardButton, Palette, StandardTableView, ComboBox, TabWidget, ProgressIndicator, ScrollView, Spinner } from "std-widgets.slint";

import { Recordings, MapRecordings, RecordingsList } from "components/recordings_list.slint";
import { RecordTAS, RecordTasSettings, RecordPath, TasRecording, TasRecordingState } from "components/record_tas.slint";
import { Render, RenderSettings, RenderSettingsTable } from "components/render_settings.slint";

export { Recordings, RecordTAS, RecordTasSettings, RecordPath, Render }

enum ActiveWindow {
    Main,
    Record,
}

export component MainWindow inherits Window {
    private property <ActiveWindow> nav: Main;

    default-font-size: 11pt;
    title: "Atlas";
    preferred-width: 1080px;
    preferred-height: 720px;
    icon: @image-url("assets/icon/icon.png");

    in property <[MapRecordings]> recordings: [/*{
            chapter-name: "Superluminary",
            checked: true,
            recordings: [
                {
                    i: 0,
                    start-time: "13:31",
                    frame-count: 3522,
                    checked: true,
                },
                {
                    i: 1,
                    start-time: "13:34",
                    frame-count: 27,
                    checked: false,
                },
            ]
        },
        { chapter-name: "The Solar Express" },
        { chapter-name: "Pinball Purgatory" },
        { chapter-name: "Cave of the Crimson Sky" },*/
    ];

    // main
    in-out property <string> error: "";

    // actions
    callback pick-tas-files-done([RecordPath], bool);

    // entrypoints
    callback record-update(float, string, bool);
    callback record-done(bool);
    callback record-ok;

    // recording
    private property <TasRecordingState> record-state;
    private property <[RecordPath]> record-paths;
    in-out property <float> record-progress;
    in-out property <string> record-status-text;
    private property <bool> record-any-file-changed;

    // render
    record-done(success) => {
        record-state = success ? TasRecordingState.DoneSuccess : TasRecordingState.DoneError;
    }
    pick-tas-files-done(paths, any-changed) => {
        record-paths = paths;
        record-any-file-changed = any-changed;
        if record-paths.length > 0 {
            nav = ActiveWindow.Record;
        }
    }

    // compare timesave
    in property <string> compare-timesave-text;

    forward-focus: key-handler;
    key-handler := FocusScope {
        key-pressed(event) => {
            if (event.modifiers.control && event.text == "f" && !event.repeat) {
                Recordings.toggle-search();
                return EventResult.accept;
            }
            if (event.modifiers.control && event.text == "a" && !event.repeat) {
                Recordings.select-all();
                return EventResult.accept;
            }
            if (event.modifiers.control && event.text == "o" && !event.repeat) {
                error = "";
                record-state = TasRecordingState.Prepare;
                RecordTAS.pick-tas-files();
                return EventResult.accept;
            }
            if (event.modifiers.control && event.text == "\n") {
                Render.render(Render.render-settings);
            }
            EventResult.reject
        }
    }

    if nav == ActiveWindow.Record: TasRecording {
        state: record-state;
        paths: record-paths;
        progress: record-progress;
        status-text: record-status-text;
        any-file-changed: record-any-file-changed;

        record-tases(paths, settings) => {
            record-state = TasRecordingState.Running;
            record-status-text = "";
            record-progress = 0.0;
            RecordTAS.record-tases(paths, settings);
        }

        ok => {
            nav = ActiveWindow.Main;
            record-state = TasRecordingState.Prepare;
            record-status-text = "";
            record-progress = 0.0;
        }
        abort => {
            nav = ActiveWindow.Main;
            RecordTAS.abort-tas();
            record-state = TasRecordingState.Prepare;
            record-status-text = "";
            record-progress = 0.0;
        }
    }
    if nav == ActiveWindow.Main: VerticalBox {
        compare-timesave-popup := PopupWindow {
            dialog := Rectangle {
                width: text.preferred-width;
                height: text.preferred-height;
                background: Palette.alternate-background;
                border-color: Palette.border;
                border-width: 2px;
                text := HorizontalLayout {
                    padding: 8px;
                    Text {
                        text: compare-timesave-text;
                    }
                }
            }

            height: dialog.preferred-height;
            width: dialog.preferred-width;

            x: 200px;
            y: 200px;
        }

        HorizontalLayout {
            padding: 8px;
            Button {
                clicked => {
                    error = "";
                    record-state = TasRecordingState.Prepare;
                    RecordTAS.pick-tas-files();
                }

                text: "Record TASes";
            }
        }

        RecordingsList {
            recordings: recordings;
            reset-error => {
                error = "";
            }
        }

        RenderSettingsTable {
            padding-top: 8px;
        }

        HorizontalLayout {
            padding-top: 8px;
            alignment: space-between;

            Text {
                vertical-alignment: center;
                horizontal-stretch: 1;
                wrap: word-wrap;
                text: root.error;
                color: #ff3333;
            }

            HorizontalLayout {

                alignment: end;
                spacing: 8px;

                compare-button := Button {
                    height: 32px;
                    visible: Recordings.compare-recordings-enabled;

                    clicked => {
                        error = "";
                        Recordings.compare-times();
                        compare-timesave-popup.show();
                    }

                    text: "Compare Times";
                }

                render-button := Button {
                    height: 32px;
                    width: 80px;

                    enabled: !Render.rendering;
                    clicked => {
                        error = "";
                        Render.render(Render.render-settings);
                    }

                    text: Render.rendering ? "‚ü≥" : "Render";
                }
            }
        }
    }
}
