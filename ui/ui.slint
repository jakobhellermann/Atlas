import { SpinBox, Button, CheckBox, Slider, LineEdit, ListView,
    HorizontalBox, VerticalBox, GridBox, StandardButton, Palette, StandardTableView, ComboBox, TabWidget, ProgressIndicator } from "std-widgets.slint";

import { CCTRecording, RecordingsTable } from "recordings_table.slint";
import { TasRecording, TasRecordingState } from "tas_recording.slint";

enum ActiveWindow {
    Main,
    Record,
}

export component MainWindow inherits Window {
    private property <ActiveWindow> nav: Main;

    default-font-size: 11pt;
    title: "tbd";

    // main
    in property <[CCTRecording]> recordings-model: [];
    in-out property <string> error: "";

    // actions
    callback delete-recent-recordings;
    callback refresh-recordings;
    callback pick-tas-files() -> [string];

    // entrypoints
    callback record-update(float, string, bool);
    callback record-done(bool);
    callback record-ok;

    // recording
    callback record-tases([string], float, bool);
    callback abort-tas;
    private property <TasRecordingState> record-state;
    private property <[string]> record-paths;
    in-out property <float> record-progress;
    in-out property <string> record-status-text;

    // render
    in property <bool> rendering: false;
    callback render(float, bool);
    private property <float> line-width: 2;
    in-out property <bool> only-render-visited;

    record-done(success) => {
        record-state = success ? TasRecordingState.DoneSuccess : TasRecordingState.DoneError;
    }

    preferred-width: 1080px;
    preferred-height: 720px;

    if nav == ActiveWindow.Record: r := TasRecording {
        state: record-state;
        paths: record-paths;
        progress: record-progress;
        status-text: record-status-text;

        record-tases(paths, fastforward-speed, run-as-merged) => {
            record-state = TasRecordingState.Running;
            record-status-text = "";
            record-progress = 0.0;
            record-tases(paths, fastforward-speed, run-as-merged);
        }

        ok => {
            nav = ActiveWindow.Main;
            record-state = TasRecordingState.Prepare;
            record-status-text = "";
            record-progress = 0.0;
        }
        abort => {
            nav = ActiveWindow.Main;
            abort-tas();
            record-state = TasRecordingState.Prepare;
            record-status-text = "";
            record-progress = 0.0;
        }
    }
    if nav == ActiveWindow.Main: VerticalBox {
        HorizontalBox {
            Button {
                clicked => {
                    error = "";
                    record-paths = pick-tas-files();
                    if record-paths.length > 0 {
                        nav = ActiveWindow.Record;
                    }
                }

                text: "Record TASes";
            }

            Button {
                clicked => {
                    error = "";
                    delete-recent-recordings();
                }

                text: "Delete recent recodings";
            }
        }

        HorizontalLayout {
            Text {
                text: "Recent CCT Recordings";
                font-size: 18pt;
                horizontal-stretch: 1;
            }

            Button {
                horizontal-stretch: 0;
                colorize-icon: true;
                icon: @image-url("refresh.svg");

                clicked => {
                    error = "";
                    refresh-recordings();
                }
            }
        }

        RecordingsTable {
            columns: ["#", "Chapter Name", "Time", "Include"];
            values: recordings-model;
        }

        HorizontalLayout {
            VerticalLayout {
                Text {
                    font-size: 18pt;
                    text: "Render Settings";
                }

                HorizontalBox {
                    padding-left: 0;
                    padding-bottom: 0;

                    Text {
                        vertical-alignment: center;
                        text: "Line Width";
                    }

                    slider := Slider {
                        value: line-width;
                        minimum: 1.0;
                        maximum: 20.0;

                        changed(val) => {
                            line-width = val;
                        }
                    }

                    Text {
                        text: Math.round(slider.value * 100) / 100;
                    }
                }

                HorizontalBox {
                    padding-left: 0;
                    padding-bottom: 0;
                    alignment: start;

                    Text {
                        vertical-alignment: center;
                        text: "Color";
                    }

                    ComboBox {
                        model: ["Gradient"];
                    }
                }

                HorizontalBox {
                    padding-left: 0;
                    padding-bottom: 0;
                    alignment: start;

                    Text {
                        vertical-alignment: center;
                        text: "Only include visited rooms";
                    }

                    CheckBox {
                        checked: only-render-visited;
                        toggled => {
                            only-render-visited = self.checked;
                        }
                    }
                }
            }
        }

        HorizontalBox {
            padding: 0px;
            alignment: space-between;

            Text {
                vertical-alignment: center;
                wrap: word-wrap;
                text: root.error;
                color: #ff3333;
            }

            Button {
                enabled: !rendering && recordings-model.length > 0;
                clicked => {
                    root.render(line-width, only-render-visited);
                }

                text: "Render";
            }
        }
    }
}
