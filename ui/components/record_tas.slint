import { VerticalBox, ProgressIndicator, StandardButton, CheckBox, Slider, SpinBox, HorizontalBox, ScrollView, Button, Palette } from "std-widgets.slint";

export struct RecordPath {
    path: string,
    git-commit: string, // empty if not in git or not changed
}

export struct RecordTasSettings {
    fastforward-speed: float,
    run-as-merged: bool,
    record-git-tree: bool,
    only-record-changes: bool,
    enable-tas-recorder: bool,
}

export global RecordTAS {
    callback pick-tas-files();
    callback record-tases([RecordPath], RecordTasSettings);
    callback abort-tas;

    in-out property <bool> celeste-started: true;
    callback start-celeste;
}

export enum TasRecordingState {
    Prepare,
    Running,
    DoneSuccess,
    DoneError,
}

export component TasRecording inherits VerticalBox {
    in property <[RecordPath]> paths: [
        { path: "2a.tas" },
        { path: "3a.tas" },
    ];
    in property <float> progress <=> progress.progress;
    in property <string> status-text <=> status.text;
    in property <TasRecordingState> state;
    in property <bool> any-file-changed;

    property <float> fastforward-speed: 500.0;
    property <RecordTasSettings> record-tas-settings: {
        fastforward-speed: 500.0,
        run-as-merged: false,
        record-git-tree: false,
        only-record-changes: false,
        enable-tas-recorder: false,
    };

    callback record-tases([RecordPath], RecordTasSettings);
    callback ok;
    callback abort;

    alignment: stretch;

    Text {
        font-size: 16pt;
        text: "Record TASes";
        wrap: word-wrap;
    }

    progress := ProgressIndicator {
        height: 5px;
    }

    status := Text {
        wrap: word-wrap;
    }

    if state == TasRecordingState.Prepare: VerticalLayout {
        spacing: 8px;

        ScrollView {
            height: min(min(x.preferred-height, 400px), root.height - 300px);
            x := VerticalLayout {
                spacing: 6px;

                for path in paths: VerticalLayout {
                    Rectangle {
                        background: Palette.control-background;
                        border-color: Palette.border;
                        border-radius: 4px;
                        height: hl.preferred-height;

                        hl := HorizontalLayout {
                            padding: 4px;
                            padding-right: 16px;

                            alignment: space-between;
                            Text {
                                font-family: "monospace";
                                text: path.path + "";
                            }
                        }
                    }

                    if path.git-commit != "":HorizontalLayout {
                        padding-top: 2px;
                        padding-left: 8px;
                        Rectangle {
                            background: Palette.control-background;
                            border-color: Palette.border;
                            border-radius: 4px;
                            height: hl.preferred-height;

                            HorizontalLayout {
                                padding: 4px;
                                padding-right: 16px;

                                alignment: space-between;
                                Text {
                                    font-family: "monospace";
                                    color: record-tas-settings.record-git-tree ? white : #ccc;
                                    text: path.path + " (" + path.git-commit + ")";
                                }
                            }
                        }
                    }
                }
            }
        }

        GridLayout {
            padding-top: 8px;

            Row {
                Text {
                    vertical-alignment: center;
                    text: "Fastforward Speed";
                }

                sb := VerticalLayout {
                    height: 32px;
                    SpinBox {
                        value: fastforward-speed;

                        edited(val) => {
                            fastforward-speed = val
                        }
                    }
                }
            }

            Row {
                Text {
                    vertical-alignment: center;
                    text: "Enable TASRecorder";
                }

                cb-enable-tas-record := CheckBox {
                    height: sb.height;
                    checked: record-tas-settings.enable-tas-recorder;

                    toggled => {
                        record-tas-settings.enable-tas-recorder = self.checked;
                    }
                }
            }

            Row {
                Text {
                    vertical-alignment: center;
                    text: "Record original as ghost";
                    color: record-tas-settings.record-git-tree ? white : #ccc;
                }

                CheckBox {
                    height: sb.height;
                    checked: record-tas-settings.record-git-tree;
                    enabled: any-file-changed;

                    toggled => {
                        record-tas-settings.record-git-tree = self.checked;
                        cb-enable-tas-record.checked = true;
                        cb-enable-tas-record.toggled();
                    }
                }
            }

            Row {
                Text {
                    vertical-alignment: center;
                    text: "Only record changed rooms";
                    color: record-tas-settings.record-git-tree ? white : #ccc;
                }

                CheckBox {
                    height: sb.height;
                    checked: record-tas-settings.only-record-changes;
                    enabled: any-file-changed;

                    toggled => {
                        record-tas-settings.only-record-changes = self.checked;
                    }
                }
            }

            Row {
                Text {
                    vertical-alignment: center;
                    text: "Run as merged file (useful for many small files, like lobby connections)";
                }

                CheckBox {
                    height: sb.height;
                    checked: record-tas-settings.run-as-merged;

                    toggled => {
                        record-tas-settings.run-as-merged = self.checked
                    }
                }
            }
        }
    }

    Rectangle {
        visible: false;
        vertical-stretch: 1;
    }

    if !RecordTAS.celeste-started: HorizontalBox {
        alignment: end;
        Button {
            text: "Start Celeste";
            clicked => {
                RecordTAS.start-celeste();
            }
        }
    }

    if state == TasRecordingState.Prepare: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.cancel;
            clicked => {
                ok()
            }
        }

        StandardButton {
            kind: StandardButtonKind.ok;
            clicked => {
                record-tases(paths, record-tas-settings);
            }
        }
    }
    if state == TasRecordingState.Running: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.abort;
            clicked => {
                abort()
            }
        }

        StandardButton {
            enabled: false;
            kind: StandardButtonKind.ok;
        }
    }
    if state == TasRecordingState.DoneSuccess: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.ok;
            clicked => {
                ok();
            }
        }
    }
    if state == TasRecordingState.DoneError: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.retry;
            clicked => {
                record-tases(paths, record-tas-settings);
            }
        }

        StandardButton {
            kind: StandardButtonKind.ok;
            clicked => {
                ok();
            }
        }
    }
}
