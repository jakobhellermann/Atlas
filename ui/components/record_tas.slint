import { VerticalBox, ProgressIndicator, StandardButton, CheckBox, Slider, SpinBox, HorizontalBox, ScrollView, Button, Palette } from "std-widgets.slint";

export global RecordTAS {
    callback pick-tas-files();
    callback record-tases([string], float, bool);
    callback abort-tas;

    in-out property <bool> celeste-started: true;
    callback start-celeste;
}

export enum TasRecordingState {
    Prepare,
    Running,
    DoneSuccess,
    DoneError,
}

export component TasRecording inherits VerticalBox {
    in property <[string]> paths: ["2a.tas", "3a.tas"];
    in property <float> progress <=> progress.progress;
    in property <string> status-text <=> status.text;
    in property <TasRecordingState> state;

    property <float> fastforward-speed: 500.0;
    property <bool> run-as-merged: false;

    callback record-tases([string], float, bool);
    callback ok;
    callback abort;

    alignment: stretch;

    Text {
        font-size: 16pt;
        text: "Record TASes";
        wrap: word-wrap;
    }

    progress := ProgressIndicator {
        height: 5px;
    }

    status := Text {
        wrap: word-wrap;
    }

    if state == TasRecordingState.Prepare: VerticalLayout {
        spacing: 8px;

        ScrollView {
            height: min(min(x.preferred-height, 400px), root.height - 300px);
            x := VerticalLayout {
                spacing: 6px;

                for path in paths: HorizontalLayout {
                    Rectangle {
                        background: Palette.control-background;
                        border-color: Palette.border;
                        border-radius: 4px;
                        height: hl.preferred-height;

                        hl := HorizontalLayout {
                            padding: 4px;
                            padding-right: 16px;

                            alignment: space-between;
                            Text {
                                font-family: "monospace";
                                text: path;
                            }

                            /*TouchArea {
                                Text {
                                    text: "â‰¡";
                                }
                            }*/
                        }
                    }
                }
            }
        }

        GridLayout {
            padding-top: 8px;
            spacing: 16px;

            Row {
                Text {
                    vertical-alignment: center;
                    text: "Fastforward Speed";
                }

                VerticalLayout {
                    height: sb.preferred-height;
                    sb := SpinBox {
                        value: fastforward-speed;

                        edited(val) => {
                            fastforward-speed = val
                        }
                    }
                }
            }

            Row {
                Text {
                    vertical-alignment: center;
                    text: "Run as merged file.\nUseful for many small files, like lobby connections";
                }

                CheckBox {
                    checked: run-as-merged;

                    toggled => {
                        run-as-merged = self.checked
                    }
                }
            }
        }
    }

    Rectangle {
        visible: false;
        vertical-stretch: 1;
    }

    if !RecordTAS.celeste-started: HorizontalBox {
        alignment: end;
        Button {
            text: "Start Celeste";
            clicked => {
                RecordTAS.start-celeste();
            }
        }
    }

    if state == TasRecordingState.Prepare: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.cancel;
            clicked => {
                ok()
            }
        }

        StandardButton {
            kind: StandardButtonKind.ok;
            clicked => {
                record-tases(paths, fastforward-speed, run-as-merged);
            }
        }
    }
    if state == TasRecordingState.Running: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.abort;
            clicked => {
                abort()
            }
        }

        StandardButton {
            enabled: false;
            kind: StandardButtonKind.ok;
        }
    }
    if state == TasRecordingState.DoneSuccess: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.ok;
            clicked => {
                ok();
            }
        }
    }
    if state == TasRecordingState.DoneError: Dialog {
        Text {
            text: "";
        }

        StandardButton {
            kind: StandardButtonKind.retry;
            clicked => {
                record-tases(paths, fastforward-speed, run-as-merged);
            }
        }

        StandardButton {
            kind: StandardButtonKind.ok;
            clicked => {
                ok();
            }
        }
    }
}
